generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Farmer {
  id          String             @id @default(uuid())
  location    String
  role        Role               @default(FARMER)
  phone       String?            @unique
  email       String?            @unique
  password    String?
  createdAt   DateTime           @default(now())
  submissions FarmerSubmission[]
}

model Restaurant {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String?   @unique
  location  String
  password  String
  role      Role      @default(RESTAURANT)
  createdAt DateTime  @default(now())
  orders    Order[]
  posSales  POSSale[]
}

model FarmerSubmission {
  id                String           @id @default(uuid())
  farmerId          String
  productName       String
  submittedQty      Float?
  acceptedQty       Float?
  totalAmount       Float?
  status            SubmissionStatus @default(PENDING)
  foodBundleId      String?
  submittedAt       DateTime         @default(now())
  verifiedAt        DateTime?
  approvedAt        DateTime?
  paidAt            DateTime?
  acceptedPrice     Float?
  approvedProductId String?
  wishedPrice       Float?
  approvedProduct   Product?         @relation(fields: [approvedProductId], references: [id])
  farmer            Farmer           @relation(fields: [farmerId], references: [id])
  foodBundle        Admin?           @relation("Foodbundle", fields: [foodBundleId], references: [id])
}

model Admin {
  id                    String             @id @default(uuid())
  username              String
  email                 String             @unique
  password              String
  role                  Role
  createdAt             DateTime           @default(now())
  phone                 String?            @unique
  foodbundleAssignments FarmerSubmission[] @relation("Foodbundle")
  products              Product[]
}

model Product {
  id                String             @id @default(uuid())
  unitPrice         Float
  unit              String
  createdAt         DateTime           @default(now())
  bonus             Int
  createdBy         String
  expiryDate        DateTime?
  images            String[]
  quantity          Float
  sku               String             @unique
  updatedAt         DateTime           @updatedAt
  category          ProductCategory
  productName       String
  status            ProductStatus      @default(ACTIVE)
  farmerSubmissions FarmerSubmission[]
  orderItems        OrderItem[]
  admin             Admin              @relation(fields: [createdBy], references: [id])
}

model Order {
  id           String      @id @default(uuid())
  restaurantId String
  status       String
  totalAmount  Float
  createdAt    DateTime    @default(now())
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems   OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Float
  unitPrice Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model POSSale {
  id            String     @id @default(uuid())
  restaurantId  String
  totalAmount   Float
  paymentMethod String
  createdAt     DateTime   @default(now())
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
}

enum Role {
  FARMER
  RESTAURANT
  ADMIN
  FOOD_BUNDLE
}

enum SubmissionStatus {
  PENDING
  VERIFIED
  APPROVED
  PAID
}

enum ProductCategory {
  VEGETABLES
  FRUITS
  GRAINS
  TUBERS
  LEGUMES
  HERBS_SPICES
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}
